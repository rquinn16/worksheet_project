Our model for this assignment is a class called “Worksheet.” Worksheet implements the WorksheetBuilder class so that we can create cells and entire spreadsheets from the Worksheet class. We use a hashmap to store all of the cells, which is a hashmap of Coord to Content, and we can easily create cells from this information and store them in an arraylist. This design choice also allows us to not care about the size of the spreadsheet since if a coord not in the hashmap is requested, we just return a Blank content.

Our cells are represented by a class called “Cell.” Every Contains two private fields: one being a “Content,” and one being a Coord. The Cell class has a method to return the content of the cell, a method to return the simplified content of the cell, and a method to return the coordinates of the cell.

Content is the interface implemented or extended by many classes in our code. It represents ANYTHING that can represent the inside of a cell. This includes formulas, references, values, etc. The methods we have for this class get the content (usually returning a copy of the content to avoid mutation), get the simplified content, and accept (for a “ContentVisitor”). Interfaces extending Content are Value (implemented by Abstract Value, which is extended by BooleanValue DoubleValue and StringValue) and Formula (implemented by Function, Reference, and ValueFormula).

ContentVisitor is the interface that visits every form of Content listed above. Our purpose for having a “ContentVisitor” was so that we can apply functions to the content of multiple cells, such as “Sum,” “Product,” “Concatenate,” and “LessThan.” All of these functional classes return type T when called (double for sum and product, boolean for lessthan, string for concatenate), and they all have an accumulator that the visit methods mutate (all visit methods are void so we don’t have to return anything until we are done computing an answer). 

To actually construct the spreadsheet from user input, we used SexpVisitor to create content based on the parsed information that the user inputs. We use the Builder to translate this information to the model.
