First of all, I want to say that our providers were extremely responsive when we asked them to make changes or had questions about their implementation. They were polite in their responses, and we had a very positive experience in our interactions with them. Their code seemed to be flawed, and it was admirable to see them acknowledge their shortcomings and try as best as they could to assist us.

However, as I mentioned, our providers had a flawed design. We found ourselves having to request changes and extra classes quite often because of how tightly coupled their implementations were. For example, in one of their view implementations, they called a field of their cell class which we did not have access to. In addition to this, they used an instance of their controller implementation in their view implementation which we also did not have access to. I would try next time to utilize interface types as to not be so tightly coupled. I would also see if there are other ways to extract information from classes without needing to have instances of them like the instance of the controller in the view. Maybe there could be a way for the controller to send information to the view without the view knowing about the controller. Another trouble we had was that there was no controller interface, so we were not able to adapt a controller to ours, as they had nothing to adapt. In general, there should be interfaces for things as high level as a controller, especially since there are so many different controller implementations that could exist.

We could not get many of the features in their view working, and it seemed that every time we pressed the check button to confirm that we wanted the inputted text to be put in the cell, the entire view would restart and reset, so no changes could actually be made. It appears instead of calling repaint when they made changes, they instead called their render method from their view interface. We also could not correctly display formulas, as they always outputted the base value, so for example, a SUM formula always displayed 0.00000000. I am unsure which end this issue is on though, our adaptation or our providers' view.

The documentation was extremely unclear as well. There are numerous words spelled wrong, and also sentences where I am unable to understand the grammar. In the String evaluate(String cellEval) method in their model interface, I could not figure out what this method was supposed to do. I am not sure what the String parameter was supposed to represent. I would next time just be more careful and thoughtful in writing documentation, and maybe showing it to someone else who doesn't know the code to see if they can figure out what each method is supposed to do.